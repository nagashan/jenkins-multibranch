name: Build and Release

on:
  workflow_call:
    inputs:
      dev_env_name:
        required: true
        type: string
      app_id:
        required: true
        type: string
      env_name:
        required: false
        type: string
    secrets:
      CI_GITHUB_TOKEN:
        required: true
      CC_TEST_REPORTER_ID:
        required: true
      NON_PROD_AWS_ACCESS_KEY_ID:
        required: true
      NON_PROD_AWS_SECRET_ACCESS_KEY:
        required: true
      PROD_AWS_ACCESS_KEY_ID:
        required: true
      PROD_AWS_SECRET_ACCESS_KEY:
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
  BUNDLE_GITHUB__COM: ${{ secrets.CI_GITHUB_TOKEN }}:x-oauth-basic
  AWS_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest
    container: ruby:2.5
    env:
      DATABASE_URL: postgres://postgres:@localhost:5432/test
      TRACKING_SERVICE_URL: 'http://tracking-service-dev.us-east-1.elasticbeanstalk.com'
      COMPANY_SERVICE_URL: 'http://company-api-dev.us-east-1.elasticbeanstalk.com'
      SHARED_APP_SECRET: itsanopensecret
      SENDGRID_USERNAME: fake
      SENDGRID_PASSWORD: fake
      RAILS_ENV: test
      RACK_ENV: test
      FK_ENVIRONMENT: test
      AWS_REGION: us-east-1
      DISABLE_SPRING: 1
      DATABASE_HOST:
      DATABASE_NAME:
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          token: "${{ secrets.CI_GITHUB_TOKEN }}"
      - name: Branch name
        run: echo running on branch ${GITHUB_REF##*/}
      - name: Identify environment
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ inputs.env_name != null ]; then
            echo "::set-output name=env_name::${{ inputs.env_name }}"
          elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "::set-output name=env_name::${{ inputs.dev_env_name }}"
          elif [ "${{ github.ref }}" = "refs/heads/production" ]; then
            echo "::set-output name=env_name::prod"
          elif [ "${{ github.ref }}" = "refs/heads/release-*" ]; then
            echo "::set-output name=env_name::qat"
          else
              echo "::set-output name=env_name::${{ inputs.dev_env_name }}"
          fi
      - uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Build
        run: |
          apt-get update && apt-get install libicu-dev libsnappy-dev zip -y
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Setup Code Climate test-reporter
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build
      - name: Test
        run: |
          echo "Running unit tests.."
          bundle exec rspec
          # bundle exec rspec --failure-exit-code 0
          RSPEC_STATUS=$?
          echo "RSPEC_STATUS: $RSPEC_STATUS"
          exit 0
      - name: Publish code coverage
        run: |
          export GIT_BRANCH="${GITHUB_REF##*/}"
          echo $GIT_BRANCH
          ./cc-test-reporter after-build -r ${{secrets.CC_TEST_REPORTER_ID}}
      - name: Bundle deployment package
        run: |
          zip -r package.zip . -x ".git/*" -x ".github/*" -x ".vscode/*" -x "vendor/*"
      - uses: actions/upload-artifact@v2
        with:
          name: deployment-artifact
          path: package.zip
    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
  release:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: aws-prod
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: deployment-artifact
      - name: Set Environment Name
        run: |
          echo "ENV_NAME=${{ needs.build.outputs.env_name }}" >> $GITHUB_ENV
      - name: Get timestamp
        id: timestamp
        run: |
          echo "::set-output name=date::$(date +'%Y_%m_%d_%T:%H:%M:%S.%3NZ')"
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 8
      - name: Deploy to EB ${{ env.ENV_NAME }}
        id: aws-non-prod-eb-deployment
        if: ${{ needs.build.outputs.env_name == 'qat' }}
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.NON_PROD_AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.NON_PROD_AWS_SECRET_ACCESS_KEY }}
          region: ${{ secrets.AWS_REGION }}
          application_name: ${{ inputs.app_id }}
          environment_name: "$${{ inputs.app_id }}-${{ env.ENV_NAME }}"
          version_label: "$${{ inputs.app_id }}-${{ env.ENV_NAME }}-${{ steps.timestamp.outputs.date }}-${{ steps.short-sha.outputs.sha }}"
          version_description: ${{ github.event.head_commit.message }}
          deployment_package: package.zip
      - name: Deploy to EB ${{ env.ENV_NAME }}
        id: aws-prod-eb-deployment
        if: ${{ needs.build.outputs.env_name != 'qat' }}
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          region: ${{ env.AWS_REGION }}
          application_name: $${{ inputs.app_id }}
          environment_name: "$${{ inputs.app_id }}-${{ env.ENV_NAME }}"
          version_label: "${{ inputs.app_id }}-${{ env.ENV_NAME }}-${{ steps.timestamp.outputs.date }}-${{ steps.short-sha.outputs.sha }}"
          version_description: ${{ github.event.head_commit.message }}
          deployment_package: package.zip
